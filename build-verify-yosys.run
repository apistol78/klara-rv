--[[
 Klara-RV
 Copyright (c) 2025 Anders Pistol.

 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at https://mozilla.org/MPL/2.0/.
]]

import (traktor)

SOURCE =
{
	"verify/Verify.v",
	"verify/Verify_BROM.v",
	"cpu/CPU.v",
	"cpu/CPU_BusMux.v",
	"cpu/CPU_PLIC.v",
	"cpu/private/CPU_ALU.v",
	"cpu/private/CPU_BRAM.v",
	"cpu/private/CPU_BRAM_1r1w.v",
	"cpu/private/CPU_CSR.v",
	"cpu/private/CPU_DCache_Comb.v",
	"cpu/private/CPU_DCache_None.v",
	"cpu/private/CPU_DCache_Reg.v",
	"cpu/private/CPU_Decode.v",
	"cpu/private/CPU_Defines.v",
	"cpu/private/CPU_Divide.v",
	"cpu/private/CPU_Execute.v",
	"cpu/private/CPU_Fetch.v",
	"cpu/private/CPU_Forward.v",
	"cpu/private/CPU_ICache_Comb.v",
	"cpu/private/CPU_ICache_None.v",
	"cpu/private/CPU_ICache_Reg.v",
	"cpu/private/CPU_Memory.v",
	"cpu/private/CPU_Multiply.v",
	"cpu/private/CPU_PreDecode.v",
	"cpu/private/CPU_Registers.v",
	"cpu/private/CPU_SkidBuffer.v",
	"cpu/private/CPU_Types.v",
	"cpu/private/CPU_Writeback.v",
	"cpu/private/fpu/CPU_FPU.v",
	"cpu/private/fpu/CPU_FPU_Add.v",
	"cpu/private/fpu/CPU_FPU_Compare.v",
	"cpu/private/fpu/CPU_FPU_Div.v",
	"cpu/private/fpu/CPU_FPU_Float.v",
	"cpu/private/fpu/CPU_FPU_Int.v",
	"cpu/private/fpu/CPU_FPU_Mul.v",
	"cpu/private/fpu/CPU_FPU_MulAdd.v"
}

function main()

	-- Ensure we can launch yosys before all else.
	if os:whereIs("yosys") == nil then
		stderr:printLn("Unable to locate yosys; ensure it's accessible through PATH.")
		return 1
	end

	-- Generate SystemVerilog instructions.
	run:run("generate-instructions.run")

	-- Convert all SystemVerilog into Verilog files.
	run:run("generate-verilog.run")

	-- Concatenate all source files.
	local f = ""
	for _, s in ipairs(SOURCE) do
		f = f .. " rtl-v/" .. s
	end

	run:mkdir("build")
	run:rm("build/Verify.bit")
	
	local xc = run:execute("yosys -p \"opt; share -aggressive; synth_ecp5 -json build/Verify.json\" " .. f)
	if xc ~= 0 then
		stderr:printLn("yosys failed; build aborted.")
		return 1
	end

	local xc = run:execute("nextpnr-ecp5 --25k --package CABGA256 --speed 6 --timing-allow-fail --top Verify --json build/Verify.json --textcfg build/Verify.config --lpf Verify.lpf --report build/Verify.report --freq 65")
	if xc ~= 0 then
		stderr:printLn("nextpnr-ecp5 failed; build aborted.")
		return 1
	end

	local xc = run:execute("ecppack --svf build/Verify.svf build/Verify.config build/Verify.bit")
	if xc ~= 0 then
		stderr:printLn("ecppack failed; build aborted.")
		return 1
	end

	local xc = run:execute("openFPGALoader -c cmsisdap --vid=0x1d50 --pid=0x602b ./build/Verify.bit")
	if xc ~= 0 then
		stderr:printLn("openFPGALoader failed; build aborted.")
		return 1
	end

	stdout:printLn("Build successful.")
end
